{
module DLexer

open FSharp.Text.Lexing
open DParser

let lexeme lexbuf = 
    LexBuffer<char>.LexemeString lexbuf

let keyword s = 
    match s with 
    | "from"        -> FROM
    | "workdir"     -> WORKDIR
    | "expose"      -> EXPOSE
    | "user"        -> USER
    | _             -> NAME s
}

let int = ['0'-'9']
let letter = ['a'-'z''A'-'Z']['a'-'z''A'-'Z''0'-'9']*

rule Token = parse
    | [' ' '\t' '\r'] { Token lexbuf }
    | '\n'            { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Token lexbuf }
    | int+            { INT (System.Int32.Parse (lexeme lexbuf)) }  
    | letter          { keyword ((lexeme lexbuf).ToLower()) }
    | '/'             { FSLASH }
    | ':'             { COLON }
    | '.'             { DOT }
    | '-'             { DASH }
    | '['             { LBRACK }
    | ']'             { RBRACK }
    | '#'             { EndLineComment lexbuf; Token lexbuf }
    | eof             { EOF }
    | _               { failwith "Lexer error: illegal symbol" }

and EndLineComment = parse
    | '\n'            { lexbuf.EndPos <- lexbuf.EndPos.NextLine }
    | (eof | '\026') { () }
    | _              { EndLineComment lexbuf }