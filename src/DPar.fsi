// Signature file for parser generated by fsyacc
module DPar
type token = 
  | EOF
  | COLON
  | DOT
  | LBRACK
  | RBRACK
  | EXPOSE
  | ENV
  | FSLASH
  | DASH
  | COMMA
  | EQ
  | FROM
  | USER
  | INT of (int)
  | CPATH of (string * string)
  | APATH of (string * string)
  | ENVVAR of (string * string)
  | CSTST of (string)
  | NAME of (string)
  | WPATH of (string)
  | RCMD of (string)
  | ECMD of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COLON
    | TOKEN_DOT
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_EXPOSE
    | TOKEN_ENV
    | TOKEN_FSLASH
    | TOKEN_DASH
    | TOKEN_COMMA
    | TOKEN_EQ
    | TOKEN_FROM
    | TOKEN_USER
    | TOKEN_INT
    | TOKEN_CPATH
    | TOKEN_APATH
    | TOKEN_ENVVAR
    | TOKEN_CSTST
    | TOKEN_NAME
    | TOKEN_WPATH
    | TOKEN_RCMD
    | TOKEN_ECMD
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_File
    | NONTERM_BaseImg
    | NONTERM_Instrs
    | NONTERM_Instr
    | NONTERM_EnvVar
    | NONTERM_WPath
    | NONTERM_CPath
    | NONTERM_AddPath
    | NONTERM_Runcmd
    | NONTERM_Entrycmd
    | NONTERM_Expose
    | NONTERM_Ports
    | NONTERM_User
    | NONTERM_Version
    | NONTERM_DottedName
    | NONTERM_DashedName
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val Main : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Absyn.dockerfile) 
