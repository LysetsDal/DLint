// ================================================
//         PARSER-GENERATOR SPECIFICATION 
// ================================================
%{
open Absyn

%}

/*   CONSTRUCTORS   */
%token <string> NAME MNTPT WPATH RCMD ECMD 
%token <string> CSTST
%token <string * string> CPATH APATH ENVVAR
%token <int> INT

/*   LEXER TOKENS   */
%token FROM USER 
%token DASH COMMA EQ
%token EXPOSE 
%token COLON DOT
%token EOF

/*   PRECEDENCE RULES    */
%nonassoc COLON DOT           /* Lowest */
%left USER FROM
%left COMMA
%left EQ
%left EXPOSE                  /* Highest */

/*   START SYMBOL   */
%start Main
%type <Absyn.dockerfile> Main 

%%

Main:
    File EOF                      { DFile $1 }
;

/* 
 * Defining a file: a Base image and a list of intrsutcions 
 */
File:
    BaseImg                       { [$1]      }
  | BaseImg Instrs                { $1 :: $2  }
;

/*
 * Base Image (Single stage build only pt.)
 */
BaseImg:
    FROM NAME COLON Version       { BaseImage($2, Tag $4)     }
;

/*
 * Parse one isntruction or many
 */
Instrs:
    Instr                         { [$1]        }
  | Instr Instrs                  { $1 :: $2    }
;

/*
 * Docker instructions that are supported
 */
Instr:
    NAME                          { Var $1                }
  | FROM NAME COLON Version       { BaseImage($2, Tag $4) }
  | MntPt                         { Volume $1             } 
  | WPath                         { Workdir $1            }
  | EXPOSE Expose                 { Expose $2             }
  | USER User                     { User $2               }
  | CPath                         { Copy $1               }
  | Runcmd                        { Run $1                }
  | Entrycmd                      { EntryCmd $1           }
  | AddPath                       { Add $1                }
  | EnvVar                        { Env $1                }
;

/*
 * ENV: parsed as a key-value pair of strings
 */
EnvVar:
    ENVVAR                        { EnvVar($1) }
;

/*
 * Volume Mount point: parsed as a string 
 */
MntPt:
    MNTPT                         { Mnt_pt $1 }  
;

/*
 * Workdir Path: parsed as a string 
 */
WPath:
    WPATH                         { WPath $1 }  
;

/*
 * Copy Path: parsed as a tuple (string * string)
 */
CPath:
    CPATH                         { CPath $1 }  
;

/*
 * Add Path: parsed as a tuple (string * string)
 */
AddPath:
    APATH                         { APath $1 }  
;

/*
 * Parsing shell commands as a string
 */
Runcmd:
    RCMD                          { Cmd $1 }
;
/*
 * Parsing the CMD command (string)
 */
Entrycmd:
    ECMD                          { Cmd $1 }
;

/*
 * Expose instr:  port, port:port or [port; ..; port]  
 */
Expose:
    INT                           { Port $1                    }  /*  EXPOSE 80          */
  | INT COLON INT                 { PortM ($1, $3)             }  /*  EXPOSE 80 : 808    */
  | INT COMMA Ports               { Ports ($1 :: $3)           }  /*  EXPOSE 22, 80, 443 */
;

/*
 * Construct a list of ports 
 */
Ports:
    INT                           { [$1]     }
  | INT COMMA Ports               { $1 :: $3 }
;

/*
 * User instr (Name || GUID || both) inside the container  
 */
User:
    NAME                          { (Some $1, None)          }
  | INT                           { (None, Some $1)          }
  | NAME INT                      { (Some $1, Some $2)      }
;

/* 
 * Version of BaseImg
 */
Version:
    NAME                          { $1                              }
  | INT                           { string $1                       }
  | INT DottedName                { string $1 + "." + $2            } 
  | INT DashedName                { string $1 + "-" + $2            }
  | NAME DottedName               { string $1 + "." + $2            }
  | NAME DashedName               { string $1 + "-" + $2            }
  | INT DottedName DashedName     { string $1 + "." + $2 + "-" + $3 }     
;

/* 
 * Used to parse tag numbers with dots
 */
DottedName:
    DOT INT                       { string $2               }
  | DOT INT DottedName            { string $2 + "." + $3    }   
;

/* 
 * Used to parse tag numbers with dashes
 */
DashedName:
    DASH NAME                     { string $2               }
  | DASH INT                      { string $2               }
  | DASH INT DottedName           { string $2 + "." + $3    }
  | DASH NAME DashedName          { string $2 + "-" + $3    }
;
