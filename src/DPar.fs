// Implementation file for parser generated by fsyacc
module DPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 4 "DPar.fsy"

open Absyn


# 11 "DPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | COLON
  | DOT
  | EXPOSE
  | DASH
  | COMMA
  | EQ
  | FROM
  | USER
  | INT of (int)
  | CPATH of (string * string)
  | APATH of (string * string)
  | ENVVAR of (string * string)
  | CSTST of (string)
  | NAME of (string)
  | WPATH of (string)
  | RCMD of (string)
  | ECMD of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COLON
    | TOKEN_DOT
    | TOKEN_EXPOSE
    | TOKEN_DASH
    | TOKEN_COMMA
    | TOKEN_EQ
    | TOKEN_FROM
    | TOKEN_USER
    | TOKEN_INT
    | TOKEN_CPATH
    | TOKEN_APATH
    | TOKEN_ENVVAR
    | TOKEN_CSTST
    | TOKEN_NAME
    | TOKEN_WPATH
    | TOKEN_RCMD
    | TOKEN_ECMD
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_File
    | NONTERM_BaseImg
    | NONTERM_Instrs
    | NONTERM_Instr
    | NONTERM_EnvVar
    | NONTERM_WPath
    | NONTERM_CPath
    | NONTERM_AddPath
    | NONTERM_Runcmd
    | NONTERM_Entrycmd
    | NONTERM_Expose
    | NONTERM_Ports
    | NONTERM_User
    | NONTERM_Version
    | NONTERM_DottedName
    | NONTERM_DashedName

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | COLON  -> 1 
  | DOT  -> 2 
  | EXPOSE  -> 3 
  | DASH  -> 4 
  | COMMA  -> 5 
  | EQ  -> 6 
  | FROM  -> 7 
  | USER  -> 8 
  | INT _ -> 9 
  | CPATH _ -> 10 
  | APATH _ -> 11 
  | ENVVAR _ -> 12 
  | CSTST _ -> 13 
  | NAME _ -> 14 
  | WPATH _ -> 15 
  | RCMD _ -> 16 
  | ECMD _ -> 17 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_COLON 
  | 2 -> TOKEN_DOT 
  | 3 -> TOKEN_EXPOSE 
  | 4 -> TOKEN_DASH 
  | 5 -> TOKEN_COMMA 
  | 6 -> TOKEN_EQ 
  | 7 -> TOKEN_FROM 
  | 8 -> TOKEN_USER 
  | 9 -> TOKEN_INT 
  | 10 -> TOKEN_CPATH 
  | 11 -> TOKEN_APATH 
  | 12 -> TOKEN_ENVVAR 
  | 13 -> TOKEN_CSTST 
  | 14 -> TOKEN_NAME 
  | 15 -> TOKEN_WPATH 
  | 16 -> TOKEN_RCMD 
  | 17 -> TOKEN_ECMD 
  | 20 -> TOKEN_end_of_input
  | 18 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_File 
    | 3 -> NONTERM_File 
    | 4 -> NONTERM_BaseImg 
    | 5 -> NONTERM_Instrs 
    | 6 -> NONTERM_Instrs 
    | 7 -> NONTERM_Instr 
    | 8 -> NONTERM_Instr 
    | 9 -> NONTERM_Instr 
    | 10 -> NONTERM_Instr 
    | 11 -> NONTERM_Instr 
    | 12 -> NONTERM_Instr 
    | 13 -> NONTERM_Instr 
    | 14 -> NONTERM_Instr 
    | 15 -> NONTERM_Instr 
    | 16 -> NONTERM_Instr 
    | 17 -> NONTERM_EnvVar 
    | 18 -> NONTERM_WPath 
    | 19 -> NONTERM_CPath 
    | 20 -> NONTERM_AddPath 
    | 21 -> NONTERM_Runcmd 
    | 22 -> NONTERM_Entrycmd 
    | 23 -> NONTERM_Expose 
    | 24 -> NONTERM_Expose 
    | 25 -> NONTERM_Expose 
    | 26 -> NONTERM_Ports 
    | 27 -> NONTERM_Ports 
    | 28 -> NONTERM_User 
    | 29 -> NONTERM_User 
    | 30 -> NONTERM_User 
    | 31 -> NONTERM_Version 
    | 32 -> NONTERM_Version 
    | 33 -> NONTERM_Version 
    | 34 -> NONTERM_Version 
    | 35 -> NONTERM_Version 
    | 36 -> NONTERM_Version 
    | 37 -> NONTERM_Version 
    | 38 -> NONTERM_DottedName 
    | 39 -> NONTERM_DottedName 
    | 40 -> NONTERM_DashedName 
    | 41 -> NONTERM_DashedName 
    | 42 -> NONTERM_DashedName 
    | 43 -> NONTERM_DashedName 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 20 
let _fsyacc_tagOfErrorTerminal = 18

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | COLON  -> "COLON" 
  | DOT  -> "DOT" 
  | EXPOSE  -> "EXPOSE" 
  | DASH  -> "DASH" 
  | COMMA  -> "COMMA" 
  | EQ  -> "EQ" 
  | FROM  -> "FROM" 
  | USER  -> "USER" 
  | INT _ -> "INT" 
  | CPATH _ -> "CPATH" 
  | APATH _ -> "APATH" 
  | ENVVAR _ -> "ENVVAR" 
  | CSTST _ -> "CSTST" 
  | NAME _ -> "NAME" 
  | WPATH _ -> "WPATH" 
  | RCMD _ -> "RCMD" 
  | ECMD _ -> "ECMD" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | EXPOSE  -> (null : System.Object) 
  | DASH  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | FROM  -> (null : System.Object) 
  | USER  -> (null : System.Object) 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CPATH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | APATH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ENVVAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTST _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WPATH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RCMD _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ECMD _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;1us;65535us;0us;2us;1us;65535us;0us;4us;2us;65535us;4us;5us;10us;11us;2us;65535us;4us;10us;10us;10us;2us;65535us;4us;26us;10us;26us;2us;65535us;4us;17us;10us;17us;2us;65535us;4us;22us;10us;22us;2us;65535us;4us;25us;10us;25us;2us;65535us;4us;23us;10us;23us;2us;65535us;4us;24us;10us;24us;1us;65535us;18us;19us;2us;65535us;36us;37us;39us;40us;1us;65535us;20us;21us;2us;65535us;8us;9us;15us;16us;4us;65535us;44us;48us;45us;46us;52us;53us;56us;57us;4us;65535us;44us;49us;45us;47us;46us;50us;55us;58us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;5us;7us;10us;13us;16us;19us;22us;25us;28us;31us;33us;36us;38us;41us;46us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;2us;2us;3us;1us;3us;1us;4us;1us;4us;1us;4us;1us;4us;2us;5us;6us;1us;6us;1us;7us;1us;8us;1us;8us;1us;8us;1us;8us;1us;9us;1us;10us;1us;10us;1us;11us;1us;11us;1us;12us;1us;13us;1us;14us;1us;15us;1us;16us;1us;17us;1us;18us;1us;19us;1us;20us;1us;21us;1us;22us;3us;23us;24us;25us;1us;24us;1us;24us;1us;25us;1us;25us;2us;26us;27us;1us;27us;1us;27us;2us;28us;30us;1us;29us;1us;30us;3us;31us;35us;36us;4us;32us;33us;34us;37us;2us;33us;37us;1us;34us;1us;35us;1us;36us;1us;37us;2us;38us;39us;2us;38us;39us;1us;39us;4us;40us;41us;42us;43us;2us;40us;43us;2us;41us;42us;1us;42us;1us;43us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;11us;13us;15us;17us;19us;21us;24us;26us;28us;30us;32us;34us;36us;38us;40us;42us;44us;46us;48us;50us;52us;54us;56us;58us;60us;62us;64us;66us;68us;72us;74us;76us;78us;80us;83us;85us;87us;90us;92us;94us;98us;103us;106us;108us;110us;112us;114us;117us;120us;122us;127us;130us;133us;135us;|]
let _fsyacc_action_rows = 59
let _fsyacc_actionTableElements = [|1us;32768us;7us;6us;0us;49152us;1us;32768us;0us;3us;0us;16385us;10us;16386us;3us;18us;7us;13us;8us;20us;10us;29us;11us;30us;12us;27us;14us;12us;15us;28us;16us;31us;17us;32us;0us;16387us;1us;32768us;14us;7us;1us;32768us;1us;8us;2us;32768us;9us;45us;14us;44us;0us;16388us;10us;16389us;3us;18us;7us;13us;8us;20us;10us;29us;11us;30us;12us;27us;14us;12us;15us;28us;16us;31us;17us;32us;0us;16390us;0us;16391us;1us;32768us;14us;14us;1us;32768us;1us;15us;2us;32768us;9us;45us;14us;44us;0us;16392us;0us;16393us;1us;32768us;9us;33us;0us;16394us;2us;32768us;9us;42us;14us;41us;0us;16395us;0us;16396us;0us;16397us;0us;16398us;0us;16399us;0us;16400us;0us;16401us;0us;16402us;0us;16403us;0us;16404us;0us;16405us;0us;16406us;2us;16407us;1us;34us;5us;36us;1us;32768us;9us;35us;0us;16408us;1us;32768us;9us;38us;0us;16409us;1us;16410us;5us;39us;1us;32768us;9us;38us;0us;16411us;1us;16412us;9us;43us;0us;16413us;0us;16414us;2us;16415us;2us;51us;4us;54us;2us;16416us;2us;51us;4us;54us;1us;16417us;4us;54us;0us;16418us;0us;16419us;0us;16420us;0us;16421us;1us;32768us;9us;52us;1us;16422us;2us;51us;0us;16423us;2us;32768us;9us;56us;14us;55us;1us;16424us;4us;54us;1us;16425us;2us;51us;0us;16426us;0us;16427us;|]
let _fsyacc_actionTableRowOffsets = [|0us;2us;3us;5us;6us;17us;18us;20us;22us;25us;26us;37us;38us;39us;41us;43us;46us;47us;48us;50us;51us;54us;55us;56us;57us;58us;59us;60us;61us;62us;63us;64us;65us;66us;69us;71us;72us;74us;75us;77us;79us;80us;82us;83us;84us;87us;90us;92us;93us;94us;95us;96us;98us;100us;101us;104us;106us;108us;109us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;1us;2us;4us;1us;2us;1us;4us;1us;2us;2us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;3us;3us;1us;3us;1us;1us;2us;1us;1us;2us;2us;2us;2us;3us;2us;3us;2us;2us;3us;3us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;3us;4us;4us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;6us;7us;8us;9us;10us;11us;12us;12us;12us;13us;13us;14us;14us;14us;15us;15us;15us;15us;15us;15us;15us;16us;16us;17us;17us;17us;17us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;65535us;16387us;65535us;65535us;65535us;16388us;65535us;16390us;16391us;65535us;65535us;65535us;16392us;16393us;65535us;16394us;65535us;16395us;16396us;16397us;16398us;16399us;16400us;16401us;16402us;16403us;16404us;16405us;16406us;65535us;65535us;16408us;65535us;16409us;65535us;65535us;16411us;65535us;16413us;16414us;65535us;65535us;65535us;16418us;16419us;16420us;16421us;65535us;65535us;16423us;65535us;65535us;65535us;16426us;16427us;|]
let _fsyacc_reductions = lazy [|
# 228 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.dockerfile in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startMain));
# 237 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_File in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "DPar.fsy"
                                                         DFile _1 
                   )
# 36 "DPar.fsy"
                 : Absyn.dockerfile));
# 248 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_BaseImg in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "DPar.fsy"
                                                         [_1]      
                   )
# 43 "DPar.fsy"
                 : 'gentype_File));
# 259 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_BaseImg in
            let _2 = parseState.GetInput(2) :?> 'gentype_Instrs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "DPar.fsy"
                                                         _1 :: _2  
                   )
# 44 "DPar.fsy"
                 : 'gentype_File));
# 271 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_Version in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "DPar.fsy"
                                                         BaseImage(_2, Tag _4)     
                   )
# 51 "DPar.fsy"
                 : 'gentype_BaseImg));
# 283 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Instr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "DPar.fsy"
                                                         [_1]        
                   )
# 58 "DPar.fsy"
                 : 'gentype_Instrs));
# 294 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Instr in
            let _2 = parseState.GetInput(2) :?> 'gentype_Instrs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "DPar.fsy"
                                                         _1 :: _2    
                   )
# 59 "DPar.fsy"
                 : 'gentype_Instrs));
# 306 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "DPar.fsy"
                                                         Var _1                    
                   )
# 66 "DPar.fsy"
                 : 'gentype_Instr));
# 317 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_Version in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "DPar.fsy"
                                                         BaseImage(_2, Tag _4)     
                   )
# 67 "DPar.fsy"
                 : 'gentype_Instr));
# 329 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_WPath in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "DPar.fsy"
                                                         Workdir _1                
                   )
# 68 "DPar.fsy"
                 : 'gentype_Instr));
# 340 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expose in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "DPar.fsy"
                                                         Expose _2                 
                   )
# 69 "DPar.fsy"
                 : 'gentype_Instr));
# 351 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_User in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "DPar.fsy"
                                                         User _2                   
                   )
# 70 "DPar.fsy"
                 : 'gentype_Instr));
# 362 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_CPath in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "DPar.fsy"
                                                         Copy _1                   
                   )
# 71 "DPar.fsy"
                 : 'gentype_Instr));
# 373 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Runcmd in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "DPar.fsy"
                                                         Run _1                    
                   )
# 72 "DPar.fsy"
                 : 'gentype_Instr));
# 384 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Entrycmd in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "DPar.fsy"
                                                         EntryCmd _1               
                   )
# 73 "DPar.fsy"
                 : 'gentype_Instr));
# 395 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_AddPath in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "DPar.fsy"
                                                         Add _1                    
                   )
# 74 "DPar.fsy"
                 : 'gentype_Instr));
# 406 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_EnvVar in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "DPar.fsy"
                                                         Env _1                    
                   )
# 75 "DPar.fsy"
                 : 'gentype_Instr));
# 417 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "DPar.fsy"
                                                         EnvVar(_1) 
                   )
# 82 "DPar.fsy"
                 : 'gentype_EnvVar));
# 428 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "DPar.fsy"
                                                         WPath _1 
                   )
# 89 "DPar.fsy"
                 : 'gentype_WPath));
# 439 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "DPar.fsy"
                                                         CPath _1 
                   )
# 96 "DPar.fsy"
                 : 'gentype_CPath));
# 450 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "DPar.fsy"
                                                         APath _1 
                   )
# 103 "DPar.fsy"
                 : 'gentype_AddPath));
# 461 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "DPar.fsy"
                                                         Cmd _1 
                   )
# 110 "DPar.fsy"
                 : 'gentype_Runcmd));
# 472 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "DPar.fsy"
                                                         Cmd _1 
                   )
# 116 "DPar.fsy"
                 : 'gentype_Entrycmd));
# 483 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "DPar.fsy"
                                                         Port _1                    
                   )
# 123 "DPar.fsy"
                 : 'gentype_Expose));
# 494 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "DPar.fsy"
                                                         PortM (_1, _3)             
                   )
# 124 "DPar.fsy"
                 : 'gentype_Expose));
# 506 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            let _3 = parseState.GetInput(3) :?> 'gentype_Ports in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "DPar.fsy"
                                                         Ports (_1 :: _3)           
                   )
# 125 "DPar.fsy"
                 : 'gentype_Expose));
# 518 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "DPar.fsy"
                                                         [_1]     
                   )
# 132 "DPar.fsy"
                 : 'gentype_Ports));
# 529 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            let _3 = parseState.GetInput(3) :?> 'gentype_Ports in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "DPar.fsy"
                                                         _1 :: _3 
                   )
# 133 "DPar.fsy"
                 : 'gentype_Ports));
# 541 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "DPar.fsy"
                                                         (Some _1, None)          
                   )
# 140 "DPar.fsy"
                 : 'gentype_User));
# 552 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "DPar.fsy"
                                                         (None, Some _1)          
                   )
# 141 "DPar.fsy"
                 : 'gentype_User));
# 563 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "DPar.fsy"
                                                         (Some _1, Some _2)      
                   )
# 142 "DPar.fsy"
                 : 'gentype_User));
# 575 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "DPar.fsy"
                                                         _1                              
                   )
# 149 "DPar.fsy"
                 : 'gentype_Version));
# 586 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "DPar.fsy"
                                                         string _1                       
                   )
# 150 "DPar.fsy"
                 : 'gentype_Version));
# 597 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            let _2 = parseState.GetInput(2) :?> 'gentype_DottedName in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "DPar.fsy"
                                                         string _1 + "." + _2            
                   )
# 151 "DPar.fsy"
                 : 'gentype_Version));
# 609 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            let _2 = parseState.GetInput(2) :?> 'gentype_DashedName in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "DPar.fsy"
                                                         string _1 + "-" + _2            
                   )
# 152 "DPar.fsy"
                 : 'gentype_Version));
# 621 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_DottedName in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "DPar.fsy"
                                                         string _1 + "." + _2            
                   )
# 153 "DPar.fsy"
                 : 'gentype_Version));
# 633 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_DashedName in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "DPar.fsy"
                                                         string _1 + "-" + _2            
                   )
# 154 "DPar.fsy"
                 : 'gentype_Version));
# 645 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            let _2 = parseState.GetInput(2) :?> 'gentype_DottedName in
            let _3 = parseState.GetInput(3) :?> 'gentype_DashedName in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "DPar.fsy"
                                                         string _1 + "." + _2 + "-" + _3 
                   )
# 155 "DPar.fsy"
                 : 'gentype_Version));
# 658 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "DPar.fsy"
                                                         string _2               
                   )
# 162 "DPar.fsy"
                 : 'gentype_DottedName));
# 669 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> int in
            let _3 = parseState.GetInput(3) :?> 'gentype_DottedName in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "DPar.fsy"
                                                         string _2 + "." + _3    
                   )
# 163 "DPar.fsy"
                 : 'gentype_DottedName));
# 681 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "DPar.fsy"
                                                         string _2               
                   )
# 170 "DPar.fsy"
                 : 'gentype_DashedName));
# 692 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "DPar.fsy"
                                                         string _2               
                   )
# 171 "DPar.fsy"
                 : 'gentype_DashedName));
# 703 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> int in
            let _3 = parseState.GetInput(3) :?> 'gentype_DottedName in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "DPar.fsy"
                                                         string _2 + "." + _3    
                   )
# 172 "DPar.fsy"
                 : 'gentype_DashedName));
# 715 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_DashedName in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "DPar.fsy"
                                                         string _2 + "-" + _3    
                   )
# 173 "DPar.fsy"
                 : 'gentype_DashedName));
|]
# 728 "DPar.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 21;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.dockerfile =
    engine lexer lexbuf 0 :?> _
