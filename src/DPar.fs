// Implementation file for parser generated by fsyacc
module DPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "DPar.fsy"

open Absyn


# 11 "DPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | COLON
  | DOT
  | LBRACK
  | RBRACK
  | EXPOSE
  | ENV
  | FSLASH
  | DASH
  | COMMA
  | EQ
  | FROM
  | USER
  | INT of (int)
  | CPATH of (string * string)
  | APATH of (string * string)
  | ENVVAR of (string * string)
  | CSTST of (string)
  | NAME of (string)
  | WPATH of (string)
  | RCMD of (string)
  | ECMD of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COLON
    | TOKEN_DOT
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_EXPOSE
    | TOKEN_ENV
    | TOKEN_FSLASH
    | TOKEN_DASH
    | TOKEN_COMMA
    | TOKEN_EQ
    | TOKEN_FROM
    | TOKEN_USER
    | TOKEN_INT
    | TOKEN_CPATH
    | TOKEN_APATH
    | TOKEN_ENVVAR
    | TOKEN_CSTST
    | TOKEN_NAME
    | TOKEN_WPATH
    | TOKEN_RCMD
    | TOKEN_ECMD
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_File
    | NONTERM_BaseImg
    | NONTERM_Instrs
    | NONTERM_Instr
    | NONTERM_EnvVar
    | NONTERM_WPath
    | NONTERM_CPath
    | NONTERM_AddPath
    | NONTERM_Runcmd
    | NONTERM_Entrycmd
    | NONTERM_Expose
    | NONTERM_Ports
    | NONTERM_User
    | NONTERM_Version
    | NONTERM_DottedName
    | NONTERM_DashedName

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | COLON  -> 1 
  | DOT  -> 2 
  | LBRACK  -> 3 
  | RBRACK  -> 4 
  | EXPOSE  -> 5 
  | ENV  -> 6 
  | FSLASH  -> 7 
  | DASH  -> 8 
  | COMMA  -> 9 
  | EQ  -> 10 
  | FROM  -> 11 
  | USER  -> 12 
  | INT _ -> 13 
  | CPATH _ -> 14 
  | APATH _ -> 15 
  | ENVVAR _ -> 16 
  | CSTST _ -> 17 
  | NAME _ -> 18 
  | WPATH _ -> 19 
  | RCMD _ -> 20 
  | ECMD _ -> 21 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_COLON 
  | 2 -> TOKEN_DOT 
  | 3 -> TOKEN_LBRACK 
  | 4 -> TOKEN_RBRACK 
  | 5 -> TOKEN_EXPOSE 
  | 6 -> TOKEN_ENV 
  | 7 -> TOKEN_FSLASH 
  | 8 -> TOKEN_DASH 
  | 9 -> TOKEN_COMMA 
  | 10 -> TOKEN_EQ 
  | 11 -> TOKEN_FROM 
  | 12 -> TOKEN_USER 
  | 13 -> TOKEN_INT 
  | 14 -> TOKEN_CPATH 
  | 15 -> TOKEN_APATH 
  | 16 -> TOKEN_ENVVAR 
  | 17 -> TOKEN_CSTST 
  | 18 -> TOKEN_NAME 
  | 19 -> TOKEN_WPATH 
  | 20 -> TOKEN_RCMD 
  | 21 -> TOKEN_ECMD 
  | 24 -> TOKEN_end_of_input
  | 22 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_File 
    | 3 -> NONTERM_File 
    | 4 -> NONTERM_BaseImg 
    | 5 -> NONTERM_Instrs 
    | 6 -> NONTERM_Instrs 
    | 7 -> NONTERM_Instr 
    | 8 -> NONTERM_Instr 
    | 9 -> NONTERM_Instr 
    | 10 -> NONTERM_Instr 
    | 11 -> NONTERM_Instr 
    | 12 -> NONTERM_Instr 
    | 13 -> NONTERM_Instr 
    | 14 -> NONTERM_Instr 
    | 15 -> NONTERM_Instr 
    | 16 -> NONTERM_Instr 
    | 17 -> NONTERM_EnvVar 
    | 18 -> NONTERM_WPath 
    | 19 -> NONTERM_CPath 
    | 20 -> NONTERM_AddPath 
    | 21 -> NONTERM_Runcmd 
    | 22 -> NONTERM_Entrycmd 
    | 23 -> NONTERM_Expose 
    | 24 -> NONTERM_Expose 
    | 25 -> NONTERM_Expose 
    | 26 -> NONTERM_Ports 
    | 27 -> NONTERM_Ports 
    | 28 -> NONTERM_User 
    | 29 -> NONTERM_User 
    | 30 -> NONTERM_User 
    | 31 -> NONTERM_Version 
    | 32 -> NONTERM_Version 
    | 33 -> NONTERM_Version 
    | 34 -> NONTERM_Version 
    | 35 -> NONTERM_Version 
    | 36 -> NONTERM_Version 
    | 37 -> NONTERM_Version 
    | 38 -> NONTERM_DottedName 
    | 39 -> NONTERM_DottedName 
    | 40 -> NONTERM_DashedName 
    | 41 -> NONTERM_DashedName 
    | 42 -> NONTERM_DashedName 
    | 43 -> NONTERM_DashedName 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 24 
let _fsyacc_tagOfErrorTerminal = 22

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | COLON  -> "COLON" 
  | DOT  -> "DOT" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | EXPOSE  -> "EXPOSE" 
  | ENV  -> "ENV" 
  | FSLASH  -> "FSLASH" 
  | DASH  -> "DASH" 
  | COMMA  -> "COMMA" 
  | EQ  -> "EQ" 
  | FROM  -> "FROM" 
  | USER  -> "USER" 
  | INT _ -> "INT" 
  | CPATH _ -> "CPATH" 
  | APATH _ -> "APATH" 
  | ENVVAR _ -> "ENVVAR" 
  | CSTST _ -> "CSTST" 
  | NAME _ -> "NAME" 
  | WPATH _ -> "WPATH" 
  | RCMD _ -> "RCMD" 
  | ECMD _ -> "ECMD" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | EXPOSE  -> (null : System.Object) 
  | ENV  -> (null : System.Object) 
  | FSLASH  -> (null : System.Object) 
  | DASH  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | FROM  -> (null : System.Object) 
  | USER  -> (null : System.Object) 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CPATH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | APATH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ENVVAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTST _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WPATH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RCMD _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ECMD _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 1us; 65535us; 0us; 4us; 2us; 65535us; 4us; 5us; 10us; 11us; 2us; 65535us; 4us; 10us; 10us; 10us; 2us; 65535us; 4us; 26us; 10us; 26us; 2us; 65535us; 4us; 17us; 10us; 17us; 2us; 65535us; 4us; 22us; 10us; 22us; 2us; 65535us; 4us; 25us; 10us; 25us; 2us; 65535us; 4us; 23us; 10us; 23us; 2us; 65535us; 4us; 24us; 10us; 24us; 1us; 65535us; 18us; 19us; 2us; 65535us; 36us; 37us; 39us; 40us; 1us; 65535us; 20us; 21us; 2us; 65535us; 8us; 9us; 15us; 16us; 4us; 65535us; 44us; 48us; 45us; 46us; 52us; 53us; 56us; 57us; 4us; 65535us; 44us; 49us; 45us; 47us; 46us; 50us; 55us; 58us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 7us; 10us; 13us; 16us; 19us; 22us; 25us; 28us; 31us; 33us; 36us; 38us; 41us; 46us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 2us; 2us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 2us; 5us; 6us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 3us; 23us; 24us; 25us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 2us; 26us; 27us; 1us; 27us; 1us; 27us; 2us; 28us; 30us; 1us; 29us; 1us; 30us; 3us; 31us; 35us; 36us; 4us; 32us; 33us; 34us; 37us; 2us; 33us; 37us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 2us; 38us; 39us; 2us; 38us; 39us; 1us; 39us; 4us; 40us; 41us; 42us; 43us; 2us; 40us; 43us; 2us; 41us; 42us; 1us; 42us; 1us; 43us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 13us; 15us; 17us; 19us; 21us; 24us; 26us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 72us; 74us; 76us; 78us; 80us; 83us; 85us; 87us; 90us; 92us; 94us; 98us; 103us; 106us; 108us; 110us; 112us; 114us; 117us; 120us; 122us; 127us; 130us; 133us; 135us; |]
let _fsyacc_action_rows = 59
let _fsyacc_actionTableElements = [|1us; 32768us; 11us; 6us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 10us; 16386us; 5us; 18us; 11us; 13us; 12us; 20us; 14us; 29us; 15us; 30us; 16us; 27us; 18us; 12us; 19us; 28us; 20us; 31us; 21us; 32us; 0us; 16387us; 1us; 32768us; 18us; 7us; 1us; 32768us; 1us; 8us; 2us; 32768us; 13us; 45us; 18us; 44us; 0us; 16388us; 10us; 16389us; 5us; 18us; 11us; 13us; 12us; 20us; 14us; 29us; 15us; 30us; 16us; 27us; 18us; 12us; 19us; 28us; 20us; 31us; 21us; 32us; 0us; 16390us; 0us; 16391us; 1us; 32768us; 18us; 14us; 1us; 32768us; 1us; 15us; 2us; 32768us; 13us; 45us; 18us; 44us; 0us; 16392us; 0us; 16393us; 1us; 32768us; 13us; 33us; 0us; 16394us; 2us; 32768us; 13us; 42us; 18us; 41us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 2us; 16407us; 1us; 34us; 9us; 36us; 1us; 32768us; 13us; 35us; 0us; 16408us; 1us; 32768us; 13us; 38us; 0us; 16409us; 1us; 16410us; 9us; 39us; 1us; 32768us; 13us; 38us; 0us; 16411us; 1us; 16412us; 13us; 43us; 0us; 16413us; 0us; 16414us; 2us; 16415us; 2us; 51us; 8us; 54us; 2us; 16416us; 2us; 51us; 8us; 54us; 1us; 16417us; 8us; 54us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 1us; 32768us; 13us; 52us; 1us; 16422us; 2us; 51us; 0us; 16423us; 2us; 32768us; 13us; 56us; 18us; 55us; 1us; 16424us; 8us; 54us; 1us; 16425us; 2us; 51us; 0us; 16426us; 0us; 16427us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 6us; 17us; 18us; 20us; 22us; 25us; 26us; 37us; 38us; 39us; 41us; 43us; 46us; 47us; 48us; 50us; 51us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 69us; 71us; 72us; 74us; 75us; 77us; 79us; 80us; 82us; 83us; 84us; 87us; 90us; 92us; 93us; 94us; 95us; 96us; 98us; 100us; 101us; 104us; 106us; 108us; 109us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 2us; 4us; 1us; 2us; 1us; 4us; 1us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 3us; 1us; 3us; 1us; 1us; 2us; 1us; 1us; 2us; 2us; 2us; 2us; 3us; 2us; 3us; 2us; 2us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 12us; 12us; 13us; 13us; 14us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 17us; 17us; 17us; 17us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 65535us; 65535us; 65535us; 16388us; 65535us; 16390us; 16391us; 65535us; 65535us; 65535us; 16392us; 16393us; 65535us; 16394us; 65535us; 16395us; 16396us; 16397us; 16398us; 16399us; 16400us; 16401us; 16402us; 16403us; 16404us; 16405us; 16406us; 65535us; 65535us; 16408us; 65535us; 16409us; 65535us; 65535us; 16411us; 65535us; 16413us; 16414us; 65535us; 65535us; 65535us; 16418us; 16419us; 16420us; 16421us; 65535us; 65535us; 16423us; 65535us; 65535us; 65535us; 16426us; 16427us; |]
let _fsyacc_reductions ()  =    [| 
# 252 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.dockerfile)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 261 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'File)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "DPar.fsy"
                                                         DFile _1 
                   )
# 34 "DPar.fsy"
                 : Absyn.dockerfile));
# 272 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BaseImg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "DPar.fsy"
                                                         [_1]      
                   )
# 41 "DPar.fsy"
                 : 'File));
# 283 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'BaseImg)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Instrs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "DPar.fsy"
                                                         _1 :: _2  
                   )
# 42 "DPar.fsy"
                 : 'File));
# 295 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Version)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "DPar.fsy"
                                                         BaseImage(_2, Tag _4)     
                   )
# 49 "DPar.fsy"
                 : 'BaseImg));
# 307 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Instr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "DPar.fsy"
                                                         [_1]        
                   )
# 56 "DPar.fsy"
                 : 'Instrs));
# 318 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Instr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Instrs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "DPar.fsy"
                                                         _1 :: _2    
                   )
# 57 "DPar.fsy"
                 : 'Instrs));
# 330 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "DPar.fsy"
                                                         Var _1                    
                   )
# 64 "DPar.fsy"
                 : 'Instr));
# 341 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Version)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "DPar.fsy"
                                                         BaseImage(_2, Tag _4)     
                   )
# 65 "DPar.fsy"
                 : 'Instr));
# 353 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'WPath)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "DPar.fsy"
                                                         Workdir _1                
                   )
# 66 "DPar.fsy"
                 : 'Instr));
# 364 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expose)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "DPar.fsy"
                                                         Expose _2                 
                   )
# 67 "DPar.fsy"
                 : 'Instr));
# 375 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'User)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "DPar.fsy"
                                                         User _2                   
                   )
# 68 "DPar.fsy"
                 : 'Instr));
# 386 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'CPath)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "DPar.fsy"
                                                         Copy _1                   
                   )
# 69 "DPar.fsy"
                 : 'Instr));
# 397 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Runcmd)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "DPar.fsy"
                                                         Run _1                    
                   )
# 70 "DPar.fsy"
                 : 'Instr));
# 408 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Entrycmd)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "DPar.fsy"
                                                         EntryCmd _1               
                   )
# 71 "DPar.fsy"
                 : 'Instr));
# 419 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AddPath)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "DPar.fsy"
                                                         Add _1                    
                   )
# 72 "DPar.fsy"
                 : 'Instr));
# 430 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'EnvVar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "DPar.fsy"
                                                         Env _1                    
                   )
# 73 "DPar.fsy"
                 : 'Instr));
# 441 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "DPar.fsy"
                                                         EnvVar(_1) 
                   )
# 80 "DPar.fsy"
                 : 'EnvVar));
# 452 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "DPar.fsy"
                                                         WPath _1 
                   )
# 87 "DPar.fsy"
                 : 'WPath));
# 463 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "DPar.fsy"
                                                         CPath _1 
                   )
# 94 "DPar.fsy"
                 : 'CPath));
# 474 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "DPar.fsy"
                                                         APath _1 
                   )
# 101 "DPar.fsy"
                 : 'AddPath));
# 485 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "DPar.fsy"
                                                         Cmd _1 
                   )
# 108 "DPar.fsy"
                 : 'Runcmd));
# 496 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "DPar.fsy"
                                                         Cmd _1 
                   )
# 112 "DPar.fsy"
                 : 'Entrycmd));
# 507 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "DPar.fsy"
                                                         Port _1                    
                   )
# 119 "DPar.fsy"
                 : 'Expose));
# 518 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "DPar.fsy"
                                                         PortM (_1, _3)             
                   )
# 120 "DPar.fsy"
                 : 'Expose));
# 530 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ports)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "DPar.fsy"
                                                         Ports (_1 :: _3)           
                   )
# 121 "DPar.fsy"
                 : 'Expose));
# 542 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "DPar.fsy"
                                                         [_1]     
                   )
# 128 "DPar.fsy"
                 : 'Ports));
# 553 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ports)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "DPar.fsy"
                                                         _1 :: _3 
                   )
# 129 "DPar.fsy"
                 : 'Ports));
# 565 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "DPar.fsy"
                                                         (Some _1, None)          
                   )
# 136 "DPar.fsy"
                 : 'User));
# 576 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "DPar.fsy"
                                                         (None, Some _1)          
                   )
# 137 "DPar.fsy"
                 : 'User));
# 587 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "DPar.fsy"
                                                         (Some _1, Some _2)      
                   )
# 138 "DPar.fsy"
                 : 'User));
# 599 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "DPar.fsy"
                                                         _1                              
                   )
# 145 "DPar.fsy"
                 : 'Version));
# 610 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "DPar.fsy"
                                                         string _1                       
                   )
# 146 "DPar.fsy"
                 : 'Version));
# 621 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'DottedName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "DPar.fsy"
                                                         string _1 + "." + _2            
                   )
# 147 "DPar.fsy"
                 : 'Version));
# 633 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'DashedName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "DPar.fsy"
                                                         string _1 + "-" + _2            
                   )
# 148 "DPar.fsy"
                 : 'Version));
# 645 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'DottedName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "DPar.fsy"
                                                         string _1 + "." + _2            
                   )
# 149 "DPar.fsy"
                 : 'Version));
# 657 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'DashedName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "DPar.fsy"
                                                         string _1 + "-" + _2            
                   )
# 150 "DPar.fsy"
                 : 'Version));
# 669 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'DottedName)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'DashedName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "DPar.fsy"
                                                         string _1 + "." + _2 + "-" + _3 
                   )
# 151 "DPar.fsy"
                 : 'Version));
# 682 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "DPar.fsy"
                                                         string _2               
                   )
# 158 "DPar.fsy"
                 : 'DottedName));
# 693 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'DottedName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "DPar.fsy"
                                                         string _2 + "." + _3    
                   )
# 159 "DPar.fsy"
                 : 'DottedName));
# 705 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "DPar.fsy"
                                                         string _2               
                   )
# 166 "DPar.fsy"
                 : 'DashedName));
# 716 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "DPar.fsy"
                                                         string _2               
                   )
# 167 "DPar.fsy"
                 : 'DashedName));
# 727 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'DottedName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "DPar.fsy"
                                                         string _2 + "." + _3    
                   )
# 168 "DPar.fsy"
                 : 'DashedName));
# 739 "DPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'DashedName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "DPar.fsy"
                                                         string _2 + "-" + _3    
                   )
# 169 "DPar.fsy"
                 : 'DashedName));
|]
# 752 "DPar.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 25;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.dockerfile =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
